package day5

import (
	"fmt"
	"log"
)

type Category struct{
	name string
	value int
	length int
}

type Solver struct{}

func (s Solver) Solve() {
	seeds := getSampleSeeds()
	conversionMap := getSampleConversionMap()

	solveLowestLocationNumber(seeds, conversionMap)
}

func solveLowestLocationNumber(seedValues []int, conversionMap map[string]Category) {
	keyName := "seed"

	categoryValues := seedValues
	for keyName != "location" {
		for index := 0; index < len(categoryValues); index++ {
			categoryValue := categoryValues[index]
			log.Println(keyName, categoryValue)

			// TODO logic about found and not found
			originalKey, categoryMetadata := getCategoryMetadata(categoryValue, conversionMap, keyName)

			if categoryMetadata.value + categoryMetadata.length - 1 <= categoryValue {
				continue
			}

			offset := categoryValue - originalKey
			value := categoryMetadata.value + offset

			categoryValues[index] = value
		}

		keyName = conversionMap[keyName].name
	}

	minLocationValue := categoryValues[0]
	for _, value := range categoryValues {
		minLocationValue = getMin(minLocationValue, value)
	}

	log.Println("minimum location value:", minLocationValue)
}

func getCategoryMetadata(categoryValue int, conversionMap map[string]Category, keyName string) (int, Category) {
	const lowerbound = -1
	keyDigits := categoryValue

	_, isFound := conversionMap[getKey(keyName, keyDigits)]
	for !isFound && keyDigits > lowerbound {
		keyDigits--
		_, isFound = conversionMap[getKey(keyName, keyDigits)]
	}

	categoryMetadata := conversionMap[getKey(keyName, keyDigits)]
	return keyDigits, categoryMetadata
}

func getKey(prefix string, suffix int) string {
	return fmt.Sprint(prefix, suffix)
}

func getMin(a, b int) int {
	if a <= b {
		return a
	} else {
		return b
	}
}

func getSampleSeeds() []int {
	return []int { 79, 14, 55, 13 }
}

func getSampleConversionMap() map[string]Category {
	return map[string]Category {
		"seed": { name: "soil" },
		"seed98": { name: "soil", value: 50, length: 2 },
		"seed50": { name: "soil", value: 52, length: 48 },
		"soil": { name: "fertilizer" },
		"soil15": { name: "fertilizer", value: 0, length: 37 },
		"soil52": { name: "fertilizer", value: 37, length: 2 },
		"soil0": { name: "fertilizer", value: 39, length: 15 },
		"fertilizer": { name: "water" },
		"fertilizer53": { name: "water", value: 49, length: 8 },
		"fertilizer11": { name: "water", value: 0, length: 42 },
		"fertilizer0": { name: "water", value: 42, length: 7 },
		"fertilizer7": { name: "water", value: 57, length: 4 },
		"water": { name: "light" },
		"water18": { name: "light", value: 88, length: 7 },
		"water25": { name: "light", value: 18, length: 70 },
		"light": { name: "temperature" },
		"light77": { name: "temperature", value: 45, length: 23 },
		"light45": { name: "temperature", value: 81, length: 19 },
		"light64": { name: "temperature", value: 68, length: 13 },
		"temperature": { name: "humidity" },
		"temperature69": { name: "humidity", value: 0, length: 1 },
		"temperature0": { name: "humidity", value: 1, length: 69 },
		"humidity": { name: "location" },
		"humidity56": { name: "location", value: 60, length: 37 },
		"humidity93": { name: "location",value: 56, length: 4 },
	}
}
